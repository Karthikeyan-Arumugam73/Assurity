<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Assurity_Assessment_Test_Plan_v1" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="p_usercount" elementType="Argument">
            <stringProp name="Argument.name">p_usercount</stringProp>
            <stringProp name="Argument.value">${__P(numberofthreads)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_rampup" elementType="Argument">
            <stringProp name="Argument.name">p_rampup</stringProp>
            <stringProp name="Argument.value">${__P(rampup)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_steadystate" elementType="Argument">
            <stringProp name="Argument.name">p_steadystate</stringProp>
            <stringProp name="Argument.value">${__P(testduration)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="p_throughput" elementType="Argument">
            <stringProp name="Argument.name">p_throughput</stringProp>
            <stringProp name="Argument.value">${__P(throughput)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${p_usercount}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${p_rampup}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${p_steadystate}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.tmsandbox.co.nz</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/Categories/${categoryid}/Details.json?catalogue=false</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters">${categoryid}</stringProp>
            <stringProp name="script">import groovy.json.*;

def jsonResponse = prev.getResponseDataAsString();
def json = new JsonSlurper().parseText(jsonResponse);
def resp = Parameters;
def respcomp = new JsonSlurper().parseText(resp);


if(prev.getResponseCode()==&quot;200&quot;) //  Text Assertion as per functional requirement point #3.1 &quot;Check for the Response Status&quot;
{
	assert json.CategoryId == respcomp; //  Functional requirement point #3.2.1 &quot;Parameter check for Category ID&quot;
	assert json.CanRelist == true;      //  Functional requirement point #3.2.2 &quot;Text Check: &quot;CanRelist&quot;: true&quot;

	
	
}

else
{
	AssertionResult.setFailure(true);
     AssertionResult.setFailureMessage(&apos;Not a Valid Response from API&apos;); // Setting up the failure message if the response code is not 200
  
}



</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">Test Assertion are written code in Groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for Category Name Path" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">CategoryId;Name;Path</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.CategoryId;$.Name;$.Path</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
            <stringProp name="TestPlan.comments">Here we try to extract the Category , name and path from the JSON response</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JMESPathExtractor guiclass="JMESPathExtractorGui" testclass="JMESPathExtractor" testname="JSON JMESPath Extractor_For Promotion ID" enabled="true">
            <stringProp name="JMESExtractor.referenceName">jmes_promotionid</stringProp>
            <stringProp name="JMESExtractor.jmesPathExpr">Promotions[*].Id</stringProp>
            <stringProp name="JMESExtractor.matchNumber">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JMESExtractor.defaultValue">NA</stringProp>
            <stringProp name="TestPlan.comments">Here we try to extract all the promotion id in the response</stringProp>
          </JMESPathExtractor>
          <hashTree/>
          <JMESPathExtractor guiclass="JMESPathExtractorGui" testclass="JMESPathExtractor" testname="JSON JMESPath Extractor For Promotion Name" enabled="true">
            <stringProp name="JMESExtractor.referenceName">jmes_promotionprice</stringProp>
            <stringProp name="JMESExtractor.jmesPathExpr">Promotions[*].Price</stringProp>
            <stringProp name="JMESExtractor.matchNumber">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JMESExtractor.defaultValue">NA</stringProp>
            <stringProp name="TestPlan.comments">Here we try to extract all the promotion name in the response</stringProp>
          </JMESPathExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor for Printing the  values in a csv file" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">int promotion_count = vars.get(&quot;jmes_promotionprice_matchNr&quot;).toInteger();
String temp1, temp2;

String categoryid =  vars.get(&quot;CategoryId&quot;);
String name =  vars.get(&quot;Name&quot;);
String path =  vars.get(&quot;Path&quot;);

def promid= new String[promotion_count+1];
def promprice = new String[promotion_count+1];


def file1 = new File(&quot;assurity_csv_file.csv&quot;); // Functional Requirement 4 : Creating a .csv file to save the Category ID, Name, Path, Promotion ID, Price

if(vars.get(&quot;jmes_promotionprice_matchNr&quot;)!=&quot;0&quot;)
{
	file1.createNewFile();
	for(int i=1; i&lt;=promotion_count ;i++)
	{
		temp1=&quot;jmes_promotionid_&quot;+i;
		temp2=&quot;jmes_promotionprice_&quot;+i;
		promid[i]= vars.get(temp1);
		promprice[i]=vars.get(temp2);
		log.info(&quot;The ID&apos;s are &quot;+ promid[i]);
		log.info(&quot;The Prices are &quot;+promprice[i]);
		file1.append(vars.get(&quot;CategoryId&quot;)+&quot;,&quot;+vars.get(&quot;Name&quot;)+&quot;,&quot;+vars.get(&quot;Path&quot;)+&quot;,&quot;+promid[i]+&quot;,&quot;+ promprice[i]+&quot;\n&quot;);
		
	}
}










</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">As part of Functional requirement , here we print following values in a csv file: Category ID, Name, Path, Promotion ID, Price</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="true">
            <doubleProp>
              <name>allowedThroughputSurplus</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="batchSize">1</intProp>
            <intProp name="batchThreadDelay">0</intProp>
            <longProp name="duration">60</longProp>
            <intProp name="exactLimit">10000</intProp>
            <longProp name="randomSeed">0</longProp>
            <stringProp name="throughput">${p_throughput}</stringProp>
            <intProp name="throughputPeriod">60</intProp>
          </PreciseThroughputTimer>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">p_categoryid.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">categoryid</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
